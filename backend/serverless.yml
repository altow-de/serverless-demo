service: dyndns

provider:
  name: aws
  runtime: nodejs6.10
  stage: test
  region: eu-central-1
  memorySize: 1024
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::*"
    - Effect: Allow
      Action:
        - route53:*
      Resource: "*"
  environment: ${file(../conf.json)}

functions:
  user:
    handler: functions/dyns.user
    name: dyndns-test-functions-user
    events:
      - http:
          path: /user
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json; charset=utf-8'"
              Access-Control-Allow-Origin: "'*'"
            template: $input.json("$")
  list:
    handler: functions/dyns.list
    name: dyndns-test-functions-list
    events:
      - http:
          path: /list
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json; charset=utf-8'"
              Access-Control-Allow-Origin: "'*'"
            template: $input.json("$")
  upsert:
    handler: functions/dyns.upsert
    name: dyndns-test-functions-upsert
    events:
      - http:
          path: /upsert
          method: post
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json; charset=utf-8'"
              Access-Control-Allow-Origin: "'*'"
            template: $input.json("$")
  remove:
    handler: functions/dyns.remove
    name: dyndns-test-functions-remove
    events:
      - http:
          path: /remove
          method: post
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json; charset=utf-8'"
              Access-Control-Allow-Origin: "'*'"
            template: $input.json("$")

plugins:
  - serverless-plugin-typescript


resources:
  Resources:
    userInfo:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dyndns-test-user-info
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    domains:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dyndns-test-domains
        AttributeDefinitions:
          - AttributeName: subdomain
            AttributeType: S
        KeySchema:
          - AttributeName: subdomain
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    dyndnsZone:
      Type: "AWS::Route53::HostedZone"
      Properties:
        Name: ${file(../conf.json):R53_HOSTED_ZONE}
    frontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(../conf.json):FRONTEND_BUCKET}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html